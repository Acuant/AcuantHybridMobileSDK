"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = require("chalk");
const cli_utils_1 = require("@ionic/cli-utils");
const command_1 = require("@ionic/cli-utils/lib/command");
const errors_1 = require("@ionic/cli-utils/lib/errors");
let GitRemoteCommand = class GitRemoteCommand extends command_1.Command {
    run(inputs, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { App } = yield Promise.resolve().then(function () { return require('@ionic/cli-utils/lib/app'); });
            const { addIonicRemote, getIonicRemote, initializeRepo, isRepoInitialized, setIonicRemote } = yield Promise.resolve().then(function () { return require('@ionic/cli-utils/lib/git'); });
            const token = yield this.env.session.getUserToken();
            const appId = yield this.env.project.loadAppId();
            const appLoader = new App(token, this.env.client);
            const app = yield appLoader.load(appId);
            if (!app.repo_url) {
                throw new errors_1.FatalException(`Missing ${chalk_1.default.bold('repo_url')} property in app.`);
            }
            if (!(yield isRepoInitialized(this.env))) {
                yield initializeRepo(this.env);
                this.env.log.warn(`Initializing a git repository for your project.\n` +
                    `Before your first ${chalk_1.default.green('git push ionic master')}, you'll want to commit all the files in your project:\n\n` +
                    `${chalk_1.default.green('git commit -a -m "Initial commit"')}\n`);
            }
            const remote = app.repo_url;
            const found = yield getIonicRemote(this.env);
            if (found) {
                if (remote === found) {
                    this.env.log.info(`Existing remote ${chalk_1.default.bold('ionic')} found.`);
                }
                else {
                    yield setIonicRemote(this.env, remote);
                    this.env.log.ok(`Updated remote ${chalk_1.default.bold('ionic')}.`);
                }
            }
            else {
                yield addIonicRemote(this.env, remote);
                this.env.log.ok(`Added remote ${chalk_1.default.bold('ionic')}.`);
            }
        });
    }
};
GitRemoteCommand = tslib_1.__decorate([
    command_1.CommandMetadata({
        name: 'remote',
        type: 'project',
        backends: [cli_utils_1.BACKEND_PRO],
        description: 'Adds/updates the Ionic git remote to your local Ionic app repository',
    })
], GitRemoteCommand);
exports.GitRemoteCommand = GitRemoteCommand;
