"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path = require("path");
const chalk_1 = require("chalk");
const string_1 = require("@ionic/cli-framework/utils/string");
const command_1 = require("@ionic/cli-utils/lib/command");
let InfoCommand = class InfoCommand extends command_1.Command {
    run(inputs, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { columnar } = yield Promise.resolve().then(function () { return require('@ionic/cli-utils/lib/utils/format'); });
            const task = this.env.tasks.next('Gathering environment info');
            const initialValue = [];
            const results = yield this.env.hooks.fire('info', { env: this.env, project: this.env.project });
            const flattenedResults = results.reduce((acc, currentValue) => acc.concat(currentValue), initialValue);
            const cliDetails = flattenedResults.filter(item => item.type === 'cli-packages');
            const globalNpmDetails = flattenedResults.filter(item => item.type === 'global-packages');
            const localNpmDetails = flattenedResults.filter(item => item.type === 'local-packages');
            const systemDetails = flattenedResults.filter(item => item.type === 'system');
            const environmentDetails = flattenedResults.filter(item => item.type === 'environment');
            const miscDetails = flattenedResults.filter(item => item.type === 'misc');
            const ionicPkg = cliDetails.find(item => item.key === 'ionic');
            const pkgPath = ionicPkg && ionicPkg.path ? path.dirname(ionicPkg.path) : undefined;
            const splitInfo = (ary) => ary
                .sort((a, b) => string_1.strcmp(a.key.toLowerCase(), b.key.toLowerCase()))
                .map((item) => [`${item.key}${item.flair ? ' ' + chalk_1.default.dim('(' + item.flair + ')') : ''}`, chalk_1.default.dim(item.value) + (item.path && pkgPath && !item.path.startsWith(pkgPath) ? ` ${chalk_1.default.dim('(' + item.path + ')')}` : '')]);
            const format = (details) => columnar(details, { vsep: ':' }).split('\n').join('\n    ');
            task.end();
            if (!this.env.project.directory) {
                this.env.log.warn('You are not in an Ionic project directory. Project context may be missing.');
            }
            if (cliDetails.length > 0) {
                this.env.log.msg('\n' + chalk_1.default.bold('cli packages:') + (pkgPath ? ' ' + chalk_1.default.dim('(' + pkgPath + ')') : ''));
                this.env.log.msg(`\n    ${format(splitInfo(cliDetails))}`);
            }
            if (globalNpmDetails.length > 0) {
                this.env.log.msg('\n' + chalk_1.default.bold('global packages:'));
                this.env.log.msg(`\n    ${format(splitInfo(globalNpmDetails))}`);
            }
            if (localNpmDetails.length > 0) {
                this.env.log.msg('\n' + chalk_1.default.bold('local packages:'));
                this.env.log.msg(`\n    ${format(splitInfo(localNpmDetails))}`);
            }
            if (systemDetails.length > 0) {
                this.env.log.msg('\n' + chalk_1.default.bold('System:'));
                this.env.log.msg(`\n    ${format(splitInfo(systemDetails))}`);
            }
            if (environmentDetails.length > 0) {
                this.env.log.msg('\n' + chalk_1.default.bold('Environment Variables:'));
                this.env.log.msg(`\n    ${format(splitInfo(environmentDetails))}`);
            }
            if (miscDetails.length > 0) {
                this.env.log.msg('\n' + chalk_1.default.bold('Misc:'));
                this.env.log.msg(`\n    ${format(splitInfo(miscDetails))}`);
            }
            this.env.log.nl();
        });
    }
};
InfoCommand = tslib_1.__decorate([
    command_1.CommandMetadata({
        name: 'info',
        type: 'global',
        description: 'Print system/environment info'
    })
], InfoCommand);
exports.InfoCommand = InfoCommand;
