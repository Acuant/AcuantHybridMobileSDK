"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = require("chalk");
const serve_1 = require("../serve");
const errors_1 = require("../errors");
const app_scripts_1 = require("./app-scripts");
function serve({ env, options }) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const [externalIP, availableInterfaces] = yield serve_1.selectExternalIP(env, options);
        const appScriptsArgs = yield serveOptionsToAppScriptsArgs(options);
        process.argv = ['node', 'appscripts'].concat(appScriptsArgs);
        const AppScripts = yield app_scripts_1.importAppScripts(env);
        const context = AppScripts.generateContext();
        // using app-scripts and livereload is requested
        // Also remove commandName from the rawArgs passed
        env.log.info(`Starting app-scripts server: ${chalk_1.default.bold(appScriptsArgs.join(' '))} - Ctrl+C to cancel`);
        const settings = yield AppScripts.serve(context);
        if (!settings) {
            throw new errors_1.FatalException(`app-scripts serve unexpectedly failed.` +
                `settings: ${settings}` +
                `context: ${context}`);
        }
        return {
            protocol: 'http',
            localAddress: 'localhost',
            externalAddress: externalIP,
            externalNetworkInterfaces: availableInterfaces,
            port: settings.httpPort,
            externallyAccessible: ![serve_1.BIND_ALL_ADDRESS, ...serve_1.LOCAL_ADDRESSES].includes(externalIP),
        };
    });
}
exports.serve = serve;
function serveOptionsToAppScriptsArgs(options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { minimistOptionsToArray } = yield Promise.resolve().then(function () { return require('../utils/command'); });
        const minimistArgs = {
            _: [],
            address: options.address,
            port: String(options.port),
            livereloadPort: String(options.livereloadPort),
            devLoggerPort: String(options.notificationPort),
            consolelogs: options.consolelogs,
            serverlogs: options.serverlogs,
            nobrowser: true,
            nolivereload: !options.livereload,
            noproxy: !options.proxy,
            lab: options.lab,
            iscordovaserve: options.iscordovaserve,
            platform: options.platform,
            target: options.target,
            env: options.env,
        };
        return minimistOptionsToArray(minimistArgs, { useEquals: false });
    });
}
exports.serveOptionsToAppScriptsArgs = serveOptionsToAppScriptsArgs;
