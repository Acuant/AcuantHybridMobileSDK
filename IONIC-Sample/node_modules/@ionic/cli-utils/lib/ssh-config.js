"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path = require("path");
const os = require("os");
const SSHConfigModule = require("ssh-config");
exports.SSHConfig = SSHConfigModule;
const fs_1 = require("@ionic/cli-framework/utils/fs");
function loadFromPath(p) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const s = yield fs_1.fileToString(p);
        return exports.SSHConfig.parse(s);
    });
}
exports.loadFromPath = loadFromPath;
function isDirective(entry) {
    return entry && entry.type === exports.SSHConfig.DIRECTIVE;
}
exports.isDirective = isDirective;
function getConfigPath() {
    return path.resolve(os.homedir(), '.ssh', 'config');
}
exports.getConfigPath = getConfigPath;
function findHostSection(conf, host) {
    return conf.find({ Host: host });
}
exports.findHostSection = findHostSection;
function ensureHostAndKeyPath(conf, conn, keyPath) {
    const section = ensureSection(conf, conn.host);
    const index = conf.indexOf(section);
    ensureSectionLine(section, 'IdentityFile', keyPath);
    if (typeof conn.port === 'number' && conn.port !== 22) {
        ensureSectionLine(section, 'Port', String(conn.port));
    }
    // massage the section for proper whitespace
    if (index === 0) {
        section.before = '';
    }
    else {
        const previousSection = conf[index - 1];
        if (isDirective(previousSection)) {
            const previousSectionLastEntry = previousSection.config[previousSection.config.length - 1];
            previousSectionLastEntry.after = '\n';
        }
        else {
            previousSection.after = '\n';
        }
        section.before = '\n';
    }
    section.after = '\n';
    for (let entry of section.config) {
        entry.before = '    ';
        entry.after = '\n';
    }
    if (index !== conf.length - 1) {
        const lastEntry = section.config[section.config.length - 1];
        lastEntry.after = '\n\n';
    }
}
exports.ensureHostAndKeyPath = ensureHostAndKeyPath;
function ensureSection(conf, host) {
    let section = findHostSection(conf, host);
    if (!section) {
        conf.push(exports.SSHConfig.parse(`\nHost ${host}\n`)[0]);
        section = findHostSection(conf, host);
    }
    if (!section) {
        throw new Error(`Could not find/insert section for host: ${host}`);
    }
    return section;
}
function ensureSectionLine(section, key, value) {
    const found = section.config.some(line => {
        if (isDirective(line)) {
            if (line.param === key) {
                line.value = value;
                return true;
            }
        }
        return false;
    });
    if (!found) {
        section.config = section.config.concat(exports.SSHConfig.parse(`${key} ${value}\n`));
    }
}
